name: Build Tactical RAG Desktop (Tauri)

on:
  push:
    tags:
      - 'v4.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 4.0.0-alpha1)'
        required: true
        default: '4.0.0-dev'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build ${{ matrix.platform.os }} (${{ matrix.platform.target }})
    strategy:
      fail-fast: false
      matrix:
        platform:
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bundles: nsis
            rust_target: x86_64-pc-windows-msvc
            arch: x64

          # macOS builds (Intel)
          - os: macos-latest
            target: x86_64-apple-darwin
            bundles: dmg
            rust_target: x86_64-apple-darwin
            arch: x64

          # macOS builds (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            bundles: dmg
            rust_target: aarch64-apple-darwin
            arch: arm64

          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bundles: appimage,deb,rpm
            rust_target: x86_64-unknown-linux-gnu
            arch: x64

    runs-on: ${{ matrix.platform.os }}

    steps:
      # ============================================================
      # CHECKOUT & SETUP
      # ============================================================
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: tactical-rag-desktop/package-lock.json

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust_target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: tactical-rag-desktop/src-tauri
          cache-on-failure: true

      # ============================================================
      # PLATFORM-SPECIFIC DEPENDENCIES
      # ============================================================
      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      # ============================================================
      # BUILD FRONTEND
      # ============================================================
      - name: Install frontend dependencies
        run: |
          cd tactical-rag-desktop
          npm ci

      - name: Build frontend
        run: |
          cd tactical-rag-desktop
          npm run build

      # ============================================================
      # BUILD TAURI APPLICATION
      # ============================================================
      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # Windows code signing (optional - production only)
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
          # macOS code signing (optional - production only)
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          projectPath: ./tactical-rag-desktop
          tagName: ${{ github.ref_name }}
          releaseName: 'Tactical RAG Desktop v__VERSION__'
          releaseBody: |
            ## Tactical RAG Desktop v__VERSION__

            ### Installation

            **Windows:**
            - Download `Tactical-RAG-Setup-__VERSION__.exe`
            - Run installer (may show "Unknown Publisher" warning in Phase 1)
            - Follow installation wizard

            **macOS:**
            - Download `Tactical-RAG-__VERSION__.dmg`
            - Open DMG and drag to Applications
            - Right-click and "Open" on first launch (unsigned in Phase 1)

            **Linux:**
            - **AppImage**: Download, chmod +x, run directly
            - **Debian/Ubuntu**: `sudo dpkg -i tactical-rag_*_amd64.deb`
            - **Fedora/RHEL**: `sudo rpm -i tactical-rag-*-1.x86_64.rpm`

            ### Auto-Update
            - Automatic update checks every 6 hours
            - Manual check: Settings > Check for Updates

            ### Changelog
            See [CHANGELOG.md](https://github.com/zhadyz/tactical-rag-system/blob/main/CHANGELOG.md) for detailed changes.

            ---
            Built with Tauri v2.0 | Signature verification enforced
          releaseDraft: true
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}
          args: --target ${{ matrix.platform.rust_target }}

      # ============================================================
      # UPLOAD BUILD ARTIFACTS
      # ============================================================
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tactical-rag-${{ matrix.platform.os }}-${{ matrix.platform.arch }}
          path: |
            tactical-rag-desktop/src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/**/*
          retention-days: 30
          if-no-files-found: error

      # ============================================================
      # POST-BUILD VALIDATION
      # ============================================================
      - name: Validate build artifacts (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          $installer = Get-ChildItem -Path "tactical-rag-desktop/src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/nsis" -Filter "*.exe" | Select-Object -First 1
          if ($installer) {
            Write-Output "Installer found: $($installer.FullName)"
            Write-Output "Size: $([math]::Round($installer.Length / 1MB, 2)) MB"
          } else {
            Write-Error "Installer not found!"
            exit 1
          }

      - name: Validate build artifacts (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          DMG_PATH=$(find tactical-rag-desktop/src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/dmg -name "*.dmg" | head -1)
          if [ -f "$DMG_PATH" ]; then
            echo "DMG found: $DMG_PATH"
            ls -lh "$DMG_PATH"
          else
            echo "DMG not found!"
            exit 1
          fi

      - name: Validate build artifacts (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          APPIMAGE_PATH=$(find tactical-rag-desktop/src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/appimage -name "*.AppImage" | head -1)
          DEB_PATH=$(find tactical-rag-desktop/src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/deb -name "*.deb" | head -1)

          if [ -f "$APPIMAGE_PATH" ]; then
            echo "AppImage found: $APPIMAGE_PATH"
            ls -lh "$APPIMAGE_PATH"
          else
            echo "AppImage not found!"
            exit 1
          fi

          if [ -f "$DEB_PATH" ]; then
            echo "Debian package found: $DEB_PATH"
            ls -lh "$DEB_PATH"
          fi

  # ============================================================
  # POST-BUILD SUMMARY
  # ============================================================
  build-summary:
    name: Build Summary
    needs: build
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate build summary
        run: |
          echo "# Tactical RAG Desktop Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for platform_dir in artifacts/*/; do
            platform=$(basename "$platform_dir")
            echo "### $platform" >> $GITHUB_STEP_SUMMARY
            find "$platform_dir" -type f -exec ls -lh {} \; | awk '{print "- " $9 " (" $5 ")"}' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          done

      - name: Check build status
        run: |
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "All builds completed successfully!"
            exit 0
          else
            echo "Some builds failed. Check logs above."
            exit 1
          fi
