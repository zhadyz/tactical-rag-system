# ============================================================
# PATH FIX SCRIPT - Updates all file paths for new structure
# ============================================================

Write-Host "Fixing all path references..." -ForegroundColor Cyan
Write-Host ""

# ============================================================
# 1. Fix .bat files in root
# ============================================================

Write-Host "Updating deploy.bat..." -ForegroundColor Yellow
@"
@echo off
powershell.exe -ExecutionPolicy Bypass -File "%~dp0_config\deploy.ps1"
pause
"@ | Out-File -FilePath "deploy.bat" -Encoding ASCII

Write-Host "Updating stop.bat..." -ForegroundColor Yellow
@"
@echo off
powershell.exe -ExecutionPolicy Bypass -File "%~dp0_config\stop.ps1"
pause
"@ | Out-File -FilePath "stop.bat" -Encoding ASCII

Write-Host "Updating swap-mission.bat..." -ForegroundColor Yellow
@"
@echo off
powershell.exe -ExecutionPolicy Bypass -File "%~dp0_config\swap-mission.ps1"
pause
"@ | Out-File -FilePath "swap-mission.bat" -Encoding ASCII

# ============================================================
# 2. Fix PowerShell scripts - Update docker-compose paths
# ============================================================

Write-Host "Updating deploy.ps1..." -ForegroundColor Yellow

$deployScript = Get-Content "_config\deploy.ps1" -Raw

# Fix docker-compose command
$deployScript = $deployScript -replace 'docker-compose up -d', 'docker-compose -f _config/docker-compose.yml up -d'

# Fix tar file paths
$deployScript = $deployScript -replace 'Test-Path "rag-app-image.tar"', 'Test-Path "_deployment/rag-app-image.tar"'
$deployScript = $deployScript -replace 'Test-Path "ollama-image.tar"', 'Test-Path "_deployment/ollama-image.tar"'
$deployScript = $deployScript -replace 'Test-Path "ollama-models.tar.gz"', 'Test-Path "_deployment/ollama-models.tar.gz"'
$deployScript = $deployScript -replace 'docker load -i rag-app-image.tar', 'docker load -i _deployment/rag-app-image.tar'
$deployScript = $deployScript -replace 'docker load -i ollama-image.tar', 'docker load -i _deployment/ollama-image.tar'
$deployScript = $deployScript -replace '\$\{PWD\}:/backup alpine sh -c "cd /data && tar xzf /backup/ollama-models.tar.gz"', '${PWD}:/backup alpine sh -c "cd /data && tar xzf /backup/_deployment/ollama-models.tar.gz"'

$deployScript | Out-File -FilePath "_config\deploy.ps1" -Encoding UTF8

Write-Host "Updating stop.ps1..." -ForegroundColor Yellow

$stopScript = Get-Content "_config\stop.ps1" -Raw
$stopScript = $stopScript -replace 'docker-compose down', 'docker-compose -f _config/docker-compose.yml down'
$stopScript | Out-File -FilePath "_config\stop.ps1" -Encoding UTF8

Write-Host "Updating swap-mission.ps1..." -ForegroundColor Yellow

$swapScript = Get-Content "_config\swap-mission.ps1" -Raw
$swapScript = $swapScript -replace 'docker-compose down', 'docker-compose -f _config/docker-compose.yml down'
$swapScript | Out-File -FilePath "_config\swap-mission.ps1" -Encoding UTF8

# ============================================================
# 3. Fix docker-compose.yml
# ============================================================

Write-Host "Updating docker-compose.yml..." -ForegroundColor Yellow

$dockerCompose = Get-Content "_config\docker-compose.yml" -Raw

# Update build context and dockerfile path
$dockerCompose = $dockerCompose -replace 'build:\s*\n\s*context: \.', "build:`n    context: ..`n    dockerfile: _config/Dockerfile"
$dockerCompose = $dockerCompose -replace 'dockerfile: Dockerfile', ''

# Update volume paths
$dockerCompose = $dockerCompose -replace '\./documents:/app/documents', '../documents:/app/documents'
$dockerCompose = $dockerCompose -replace '\./chroma_db:/app/chroma_db', '../chroma_db:/app/chroma_db'

$dockerCompose | Out-File -FilePath "_config\docker-compose.yml" -Encoding UTF8

# ============================================================
# 4. Fix Dockerfile
# ============================================================

Write-Host "Updating Dockerfile..." -ForegroundColor Yellow

$dockerfile = Get-Content "_config\Dockerfile" -Raw

# Update COPY commands
$dockerfile = $dockerfile -replace 'COPY requirements.txt \.', 'COPY _config/requirements.txt .'
$dockerfile = $dockerfile -replace 'COPY \. \.', 'COPY _src/ /app/'
$dockerfile = $dockerfile -replace 'COPY startup.sh /app/startup.sh', 'COPY _config/startup.sh /app/startup.sh'

$dockerfile | Out-File -FilePath "_config\Dockerfile" -Encoding UTF8

# ============================================================
# 5. Create a README in root with quick instructions
# ============================================================

Write-Host "Creating root README.md..." -ForegroundColor Yellow

@"
# TACTICAL RAG DOCUMENT INTELLIGENCE SYSTEM

## Quick Start

**For Operators (End Users):** See ``docs/OPERATOR-GUIDE.md``

**For Maintainers (IT/Technical):** See ``docs/MAINTAINER-GUIDE.md``

---

## One-Click Deployment

1. **Start System:** Double-click ``deploy.bat``
2. **Change Documents:** Double-click ``swap-mission.bat``
3. **Stop System:** Double-click ``stop.bat``

---

## Directory Structure

``````
├── deploy.bat                 ← Double-click to start
├── swap-mission.bat          ← Double-click to change documents
├── stop.bat                  ← Double-click to stop
├── documents/                ← Add your documents here
├── chroma_db/                ← Database (auto-generated)
├── docs/                     ← Full documentation
├── _deployment/              ← Docker images (don't touch)
├── _config/                  ← Configuration files (don't touch)
└── _src/                     ← Source code (don't touch)
``````

---

## Requirements

- Windows 10/11
- Docker Desktop installed and running
- 8 GB RAM minimum (16 GB recommended)

---

## First Time Setup

1. Ensure Docker Desktop is running
2. Place documents in the ``documents/`` folder
3. Double-click ``deploy.bat``
4. Wait 3-5 minutes for initial setup
5. Browser opens automatically

---

## Support

- **Operators:** See ``docs/OPERATOR-GUIDE.md``
- **Technical Issues:** See ``docs/MAINTAINER-GUIDE.md``
- **Emergency Reset:** Run ``swap-mission.bat`` then ``deploy.bat``

---

**WARNING:** This is a U.S. Government Information System. 
Unauthorized access is prohibited. By using this system, you consent to monitoring.
"@ | Out-File -FilePath "README.md" -Encoding UTF8

Write-Host ""
Write-Host "============================================================" -ForegroundColor Green
Write-Host "    PATH FIXES COMPLETE!" -ForegroundColor Green
Write-Host "============================================================" -ForegroundColor Green
Write-Host ""
Write-Host "All files have been updated with correct paths." -ForegroundColor Cyan
Write-Host ""
Write-Host "NEXT STEPS:" -ForegroundColor Yellow
Write-Host "1. Test the deployment: Double-click deploy.bat" -ForegroundColor White
Write-Host "2. Verify system starts correctly" -ForegroundColor White
Write-Host "3. If everything works, you're ready for field deployment" -ForegroundColor White
Write-Host ""
Write-Host "If you get errors, check:" -ForegroundColor Yellow
Write-Host "- Docker Desktop is running" -ForegroundColor White
Write-Host "- All files are in the correct folders" -ForegroundColor White
Write-Host "- Run this script again if you moved files" -ForegroundColor White
Write-Host ""
Read-Host "Press Enter to exit"